package start.B001_thread;

public class A006_lock {
//    1. Java对象结构
//    Java 内置锁很多信息都放在对象结构中，这里先了解一下 Java 对象结构。
//    Java 对象（Object实例）结构包括对象头、对象体和对齐字节三部分。
//    三部分的作用：
//    对象头包括三个字段：
//    Mark Word（标记字），用于存储自身运行时的数据，例如GC标志位、哈希码、锁状态等。
//    Class Pointer（类对象指针），用于存放方法区Class对象的地址，虚拟机通过这个指针来确定这个对象是哪个类的实例。
//    Array Length（数组长度），可选字段，Java数组用于记录长度。
//    对象体包含对象的实例变量，用于成员属性值，包括父类的成员属性值，这部分内存按4字节对齐。
//    对齐字节也叫填充字节，保证Java对象所占内存字节数是8的倍数。
//    1.2 Mark Word
//    Java 内置锁的信息主要存放在对象头的 Mark Word 之中。
//    Java 内置锁在 JDK 1.8之后有4种状态：无锁、偏向锁、轻量级锁、重量级锁。
//    下面介绍下各个部分：图5.lock_in_java8
//        lock：锁状态标记位。
//        biased_lock：是否启用偏向锁。
//        age：分代年龄。
//        identity_hashcode：对象表示哈希码。
//        thread：线程ID。
//        epoch：偏向时间戳。
//        ptr_to_lock_record：在轻量级锁的状态下指向栈帧中锁记录的指针。
//        ptr_to_heavyweight_monitor：在重量级锁的状态下指向对象监视器的指针。
//        其中lock和biased_lock一起表示锁状态：
//
//            状态	biased_lock	lock
//            无锁	0	01
//            偏向锁	1	01
//            轻量级锁	0	00
//            重量级锁	0	10
//            GC标记	0	11
//    2. 锁状态
//    锁状态会随着竞争情况而逐渐升级，但是内置锁只可以升级，不能降级。
//
//    下面依次介绍下每个锁状态：
//
//    无锁：Java对象刚刚创建的时候没有任何线程来竞争，说明对象处于无锁状态。
//    偏向锁：偏向锁是指一段同步代码一直被同一个线程所访问，那么该线程会自动获取锁。这个过程不需要任何检查和切换，非常高效。
//    轻量级锁：当有两个线程开始竞争这个锁对象时，不再是偏向锁，锁会升级为轻量级锁。两个线程公平晶振，哪个线程先占有锁对象，锁对象的 Mark Word 就指向哪个线程的栈帧中的锁记录。
//    重量级锁：重量级锁会让其它申请的线程之间进入阻塞，性能降低。重量级锁也叫同步锁，这时Mark Word会指向一个监视器对象，监视器对象用集合的形式来登记和管理排队的线程。
//    下面在介绍下自旋原理：
//
//    当锁处于偏向锁，又被另一个线程企图抢占时，偏向锁就会升级为轻量级锁。企图抢占的线程会通过自旋的形式尝试获取锁。如果持有锁的线程能在短时间内释放锁资源，那么那些等待竞争锁的线程就不需要进行内核态和用户态之间的切换来进行阻塞挂起的状态，它们只需要等一等（自旋），等持有锁的线程释放后立即获取线程。
//
//    但是如果一直获取不到锁，也不能一直自旋消耗CPU，这就需要设置一个自旋等待的最大时间。JDK1.6 以后引入了自适应自旋锁，自旋的时间不固定，而是由前一次在同一个锁上的自旋时间以及锁的拥有者的状态来决定的。线程如果自旋成功，下次自旋的次数会更多，如果自旋失败，下次就会减少。
//
//    如果持有锁的线程执行的时间超过自旋等待的最大时间仍没有释放锁，就会导致其它争用锁的线程在虽大等待时间内还是获取不到锁，争用线程会停止自旋进入阻塞状态，该锁膨胀为重量级锁。
//

//    3.偏向锁
//    偏向锁的作用是消除无竞争情况下的同步原语，提升程序性能。
//    测试使用 Maven 项目，引入了 OpenJDK 提供的 JOL（Java Object Layout）包




//    作者：简单一点点
//    链接：https://www.jianshu.com/p/36408b110b57
//    来源：简书
//    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。


}
